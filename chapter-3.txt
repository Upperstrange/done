CHAPTER 3
METHODOLOGY 
3.1 Introduction
This chapter provides a comprehensive overview of the methodology employed to design, construct, and implement the cloud-based water quality surveillance system. It details the step-by-step process, starting from the design and 3D printing of the PLA boat to the integration of all electronic components, including the ESP32 microcontroller, water quality sensors, the motor and control system, the Micro SD card reader, and the NEO 6M GPS module. Furthermore, this chapter elucidates the software architecture, spanning from real-time data acquisition and transmission to the cloud-based Firebase database, the Google Cloud VM environment hosted with Coolify, the development of the real-time data dashboard, and the implementation of three distinct machine learning models for predictive analysis. We will discuss the rationale behind component selection, provide block diagrams and connection details for clarity, outline the data flow, describe the machine learning model development process (including data preprocessing, training, and evaluation), and list the software libraries and tools utilized throughout the project. This chapter will provide a clear and detailed account of how the system was built and how it functions.
3.2 Methodology
System Design and Planning:
The project utilizes a custom-designed, buoyant boat hull constructed through 3D printing using PLA filament. This design provides a stable platform to accommodate all electronic modules (ESP32, sensors, GPS module, SD card reader), the motor and control system, and the necessary power sources. The internal compartment is designed to protect sensitive electronics from water splashes and humidity. The boat's dimensions and shape were optimized for maneuverability and sensor deployment in local water bodies.
Hardware Integration:
The ESP32 microcontroller serves as the central processing unit, managing sensor readings, GPS data acquisition, local data logging (via SD card), and wireless communication. The water quality sensors – TDS sensor, pH sensor, temperature sensor, and turbidity sensor – are directly interfaced with the analog and digital input/output pins of the ESP32. These sensors are periodically polled (every 5 seconds) to collect real-time water quality parameters. A NEO 6M GPS module is integrated with the ESP32 to acquire location data, enabling the potential for spatial analysis of water quality. The GPS module's data output is processed by the ESP32. A Micro SD Card Reader Module is connected to the ESP32, allowing for local storage of sensor data and GPS coordinates as a backup in case of Wi-Fi connectivity issues.
Boat Propulsion and Control:
A 1000kV Brushless DC (BLDC) motor is mounted at the tail of the 3D-printed boat and connected to a propeller for propulsion. The motor's speed is controlled by a 30A Electronic Speed Controller (ESC), which is powered by a 13.1V Lithium Polymer (LiPo) battery. The ESC is connected to the receiver of a Flysky CT6B transmitter/receiver system, allowing for manual control of the boat's movement. A servo motor is also connected to the receiver and mechanically linked to the BLDC motor, enabling left and right directional control.
Data Transmission and Cloud Integration:
After sensor readings and GPS data acquisition, the ESP32 formats data packets and transmits them wirelessly via its Wi-Fi module to a Firebase Realtime Database. This establishes a continuous data stream accessible in real-time. Simultaneously, the data is also logged locally onto the Micro SD card.
Data Storage and Machine Learning Pipeline:
On the backend, a FastAPI server (hosted on a Google Cloud Virtual Machine with Coolify) fetches the stored data from Firebase. This server performs data cleaning and preprocessing. The preprocessed data is then used to train and run three distinct machine learning models:
LSTM model for time series forecasting of water quality parameters.
LSTM model for corrosion risk assessment based on the collected water quality data.
Random Forest model for water quality grade assessment based on the multi-parameter sensor data.
The predictions and assessments from these models are then made available to the frontend for visualization.
User Interfaces and Visualization:
A modern frontend web application using React is hosted on the Google Cloud VM. This dashboard displays:
Real-time sensor readings and GPS coordinates.
Historical trends of water quality parameters.
Predictions of future water quality parameters generated by the first LSTM model.
Corrosion risk assessments from the second LSTM model.
Water quality grades determined by the Random Forest model.
Spatial visualization of water quality data on a map using the integrated GPS data.
3.3 Assumptions Made
Operational Environment: The initial testing and data collection are assumed to occur in relatively calm water bodies in and around Guwahati, Assam. The 3D-printed PLA boat's performance and stability might be affected by strong currents, significant wave action, or debris, potentially requiring design adjustments for more challenging conditions.
Sensor Performance: We assume that the selected water quality sensors (TDS, conductivity, pH, temperature, and turbidity) provide reasonably accurate and consistent readings within their specified operating ranges. While periodic calibration will be necessary, the current methodology assumes minimal significant drift or failure of these sensors during the initial phase of data collection.
Wireless Connectivity and Cloud Services: Reliable Wi-Fi connectivity for the ESP32 to the designated network for data transmission to the Firebase Realtime Database is assumed during operation. Similarly, continuous availability and stable performance of the Firebase and Google Cloud services (including the VM hosting the website and FastAPI server) are assumed. Intermittent network outages or service disruptions could impact real-time data transmission and access to the dashboard and machine learning models. The system's ability to mitigate temporary disconnections through local SD card storage will be evaluated.
GPS Accuracy: The data obtained from the NEO 6M GPS module is assumed to provide reasonably accurate location coordinates. Factors such as signal blockage in certain environments (e.g., under dense tree cover or near tall structures) could affect the accuracy and availability of GPS data. The impact of potential GPS inaccuracies on spatial analysis will be considered.
Power Supply Stability: The power supplied to the Arduino Mega and the ESP32 is assumed to be stable and within the operating voltage requirements of each component. Voltage drops or fluctuations could affect sensor readings, data transmission, or the overall system operation. The LiPo battery powering the boat's motor system is assumed to provide consistent power for controlled movement.
Initial Data Sufficiency for ML Models: While the LSTM models benefit from historical data, we assume that the initial data collected will be sufficient to begin training and generating preliminary predictions and corrosion risk assessments. The accuracy and reliability of these models are expected to improve as a more extensive and representative dataset is accumulated over time for the water bodies in the Guwahati region. The Random Forest model for water quality grade assessment will also rely on sufficient initial data to learn meaningful classifications.
3.4 Functional Block Diagrams:

Fig 3.1: Functional Block Diagram
3.5 Circuit Diagram:

Fig 3.2: Circuit Diagram
3.6 Component Specifications:
ESP32:
Connectivity: Integrated 2.4 GHz Wi-Fi (IEEE 802.11 b/g/n) for wireless communication with the Firebase Realtime Database.
Processing Power: Features a dual-core 32-bit LX6 microprocessor, providing sufficient processing capabilities for data acquisition, handling GPS and             Fig 3.2: ESP32 Module     card modules, and managing communication protocols.               
GPIO Pins: Offers a wide range of General Purpose Input/Output (GPIO) pins, including analog-to-digital converters (ADCs) and digital-to-analog converters (DACs), necessary for interfacing with the various water quality sensors, the GPS module, and the SD card reader.
Arduino Mega (ATmega2560):
Operating Voltage: It is being used to power the entire monitoring system.
Digital I/O Pins: Features 54 digital input/output pins (16 of which can be used as PWM outputs), providing sufficient pins for controlling and interfacing with various external components.                      Fig 3.2: ATmega2560
Analog Input Pins: Equipped with 16 analog input pins (10-bit resolution), used to read the analog signals from the pH, TDS, and turbidity sensors.
TDS Sensor:
Measurement Range: Designed to measure the Total Dissolved Solids (TDS) concentration in water within a specific range.
Conductivity Measurement: Capable of providing readings related to the electrical conductivity of the water, offering an additional parameter for water quality analysis.                                                                         Fig 3.2: TDS Sensor
Analog Output: Provides an analog voltage signal proportional to the TDS/conductivity level, which is read by the ESP32's ADC pins.
pH Sensor:
Measurement Range: Measures the acidity or alkalinity of the water, typically ranging from 0 to 14 pH units.
Analog Output: Outputs an analog voltage signal that corresponds to the pH level of the water, requiring interfacing with the ESP32's ADC.
Calibration Requirement: Requires calibration using standard pH buffer solutions (e.g., pH 4, 7,  and 10) to ensure accurate and reliable pH readings.                 Fig 3.2: pH Sensor
Temperature Sensor:
Digital Interface: Utilizes the one-wire communication protocol, simplifying the wiring by requiring only one data pin (plus power and ground) for communication with the ESP32.
Accuracy: Offers a temperature measurement accuracy of ±0.5°C within its specified operating range.
Wide Operating Range: Operates over a broad temperature range (typically -55°C to +125°C), suitable         for monitoring water temperatures in the local environment.      Fig 3.2: DS18B20                                        
Turbidity Sensor:
Measurement Principle: Measures the cloudiness or haziness of the water caused by suspended particles by detecting the amount of light scattered by these particles.
Analog Output: Provides an analog voltage signal that is inversely proportional to the water clarity (higher turbidity = lower voltage, typically), which is read by the ESP32's ADC.                                                 Fig 3.2: Turbidity Sensor                      
Relative Measurement: Often provides a relative measure of turbidity and calibrated against NTU (Nephelometric Turbidity Units) standard for quantitative analysis.
3D-Printed PLA Boat Hull:
Material: Constructed using Polylactic Acid (PLA) filament, a biodegradable and relatively water-resistant thermoplastic suitable for creating the boat's hull.
Custom Design: The hull is specifically designed through CAD (Computer-Aided Design) and fabricated using 3D printing technology to provide buoyancy, stability, and dedicated compartments for housing the electronic components and sensors.
Lightweight and Maneuverable: PLA is a lightweight material, contributing to the boat's portability and ease of manual control on the water.
NEO 6M GPS Module:
Satellite Acquisition: Capable of receiving signals from multiple GPS satellites to determine its precise geographical location (latitude and longitude).
Data Output: Outputs location data in NMEA (National Marine Electronics Association) format, which can be parsed by the ESP32 to extract  latitude, longitude, altitude, speed, and other relevant information.                                                                             Fig 3.2: GPS Module
Power Requirement: Operates at a low voltage (typically 3.3V or 5V).
Micro SD Card Reader Module:
Interface: Communicates with the ESP32 using the SPI (Serial Peripheral Interface) protocol, allowing for high-speed data transfer to and from the Micro SD card.
Local Data Storage: Enables the system to locally store sensor readings and GPS data on a removable Micro SD card, providing a redundant data logging mechanism in  case of network disruptions.                                                              Fig 3.2: Micro SD Card Reader                                               
Capacity: Supports various capacities of Micro SD cards, allowing for extended periods of data logging.
BLDC Motor (1000kV):
High Speed and Efficiency: The 1000kV rating motor was selected for high-speed operation and efficient power conversion for boat propulsion.
Brushless Design: Being a brushless DC motor, it offers advantages such as higher efficiency, longer lifespan, and lower maintenance compared to brushed motors.                                                                Fig 3.2: BLDC Motor
Power Requirement: Requires a specific voltage and current range (determined by the ESC and LiPo battery) for optimal operation. 
Electronic Speed Controller (ESC - 30A):
Motor Control: Regulates the speed of the BLDC motor by controlling the power delivered to it based on the signal received from the Flysky receiver.
Current Rating: The 30A rating indicates the maximum continuous current the ESC can handle, ensuring it can safely power the 1000kV motor under typical operating conditions.
Battery Compatibility: Designed to be compatible with the voltage range of the 13.1V LiPo battery used in the system.                                                                         Fig 3.2: ESC
LiPo Battery (13.1V):
High Energy Density: Lithium Polymer batteries offer a high energy-to-weight ratio, providing significant power for the boat's propulsion system without adding excessive weight.                              
                                                                                                  Fig 3.2: LiPo Battery
Voltage Output: The 13.1V nominal voltage is suitable for powering the 30A ESC and the 1000kV BLDC motor.
Discharge Rate: Capable of delivering the necessary current to the ESC to drive the motor effectively.

FlySky CT6B Transmitter and Receiver:
Radio Communication: A 6-channel 2.4GHz radio control system used for remote manual control of the boat.
Transmitter: The handheld transmitter sends control signals to the receiver mounted on the boat.
Receiver: The receiver on the boat interprets the signals from the transmitter and controls the ESC (for motor speed) and the servo motor (for steering).                                                          Fig 3.2: Transmitter & Receiver  
Servo Motor:
Rotational Actuation: A small electric motor that can rotate its output shaft to a specific angle based on the control signal received from the Flysky receiver.
Steering Mechanism: Used to mechanically rotate the BLDC motor (and hence the propeller) left or right, enabling directional control of the boat.
Precise Positioning: Offers relatively precise angular positioning, allowing for accurate steering adjustments.                                                                           Fig 3.2: Servo Motor
3.7 Justification for Component Selection:
ESP32: Selected as the primary microcontroller due to its integrated Wi-Fi capabilities, which are crucial for direct and efficient wireless data transmission to the Firebase cloud platform. Its dual-core architecture also provides sufficient processing power for managing multiple sensors, GPS, and local storage.
Arduino Mega: Serves as a dedicated power supply and analog signal acquisition board for the water quality sensors, leveraging its robust analog input capabilities and 5V output.
Water Quality Sensors (TDS, pH, Temperature, Turbidity): Chosen as they represent fundamental indicators of water quality, providing a comprehensive baseline assessment of the water bodies under surveillance.
3D-Printed PLA Boat Hull: Opted for due to the flexibility of custom design, relatively low cost for prototyping, and sufficient buoyancy and water resistance for the intended operational environment.
NEO 6M GPS Module: Integrated to enable the acquisition of location data, which is essential for spatial analysis and mapping of water quality parameters.
Micro SD Card Reader Module: Included to provide a crucial layer of data redundancy through local storage, mitigating the risk of data loss due to intermittent wireless connectivity.
BLDC Motor, ESC, LiPo Battery, and Flysky Control System: Selected to provide a reliable and controllable propulsion system for the boat, allowing for data collection at specific locations within the water bodies.
3.8 Tools Used
Measurement and Calibration: Multimeter for electrical testing, sensor-specific calibration solutions (buffer solutions).
Assembly and Fabrication: Basic hand tools (cutters, screwdrivers, pliers), adhesives (glue gun, cyanoacrylate), soldering iron and solder.
Software and Libraries: Arduino IDE, ESP-IDF (or PlatformIO), Python libraries, web development frameworks, Firebase SDK.
Documentation: Component datasheets (ESP32, sensors, GPS, SD card module), online resources and tutorials.
3D Printing: CAD software Autodesk Fusion 360 for boat design, 3D printer and PLA filament for hull construction.
3.9 Software Tools & Frameworks
Microcontroller Programming: Arduino IDE (for initial ESP32 setup and sensor interfacing code).

                   
                                   Fig 3.2: Arduino IDE
Backend & API: FastAPI (Python framework for building the API to serve data and ML predictions), Uvicorn (ASGI server to run the FastAPI application).


                                                    Fig 3.2: FastAPI
Database: Firebase Realtime Database (NoSQL cloud database for storing real-time sensor data and potentially model outputs).


                                               Fig 3.2: Firebase Database
Cloud Hosting & Deployment: Google Cloud Virtual Machine (VM) managed with Coolify (for hosting the website dashboard and the backend API).


                                       Fig 3.2: Google Cloud Virtual Machine
Frontend: React (JavaScript library for building the dynamic user interface of the web dashboard), Vite (build tool for fast development), Tailwind CSS (utility-first CSS framework for styling).


                                                 Fig 3.2: Frontend Stack
Machine Learning Libraries: TensorFlow (Python library for implementing the Long Short-Term Memory (LSTM) models), scikit-learn (Python library for data preprocessing, model evaluation, and the Random Forest model), Pandas and NumPy (Python libraries for efficient data manipulation and numerical operations).



                                          Fig 3.2: Machine Learning Libraries
Version Control & IDEs: Git (distributed version control system for code management), Visual Studio Code (integrated development environment for code editing and debugging).


                                            Fig 3.2: Version Control & IDEs
3.10 Preliminary Result Analysis 
Initial tests with the integrated sensor system (TDS, conductivity, pH, temperature, turbidity) connected to the ESP32 have yielded stable and consistent readings in controlled environments. The wireless data transmission from the ESP32 to the Firebase Realtime Database has been successfully established and proven reliable. Furthermore, the local data logging functionality using the Micro SD card has been tested and confirmed to provide data redundancy during simulated network interruptions.
The real-time data dashboard hosted on the Google Cloud VM (managed with Coolify) is functional, displaying live sensor readings and, where available, preliminary GPS coordinates. The integration of the three machine learning models is in progress:
LSTM for Time Series Forecasting: Initial training on the collected dataset shows promising signs of the model's ability to learn temporal patterns in the water quality parameters.
LSTM for Corrosion Risk Assessment: Preliminary implementation of this model shows promising results with initial tests focused on identifying correlations between water quality parameters and potential corrosion indicators. More data and domain-specific knowledge will be incorporated to enhance the model's reliability.
Random Forest for Quality Grade Assessment: The Random Forest model has been trained on the available multi-parameter data to classify water quality into predefined grades. Initial results indicate the model can differentiate between different quality levels, but further tuning and validation are required for robust classification.
The integration of the NEO 6M GPS module is successful in acquiring location data, and efforts are now focused on incorporating this spatial information into the database and visualizing it on the web dashboard.
The manual control system for the 3D-printed boat, utilizing the BLDC motor, ESC, and Flysky transmitter/receiver, has been tested and allows for controlled movement within water bodies, enabling data collection at specific locations.
While comprehensive field testing and extensive data collection are ongoing, these preliminary results indicate the successful integration of the core hardware and software components, laying a solid foundation for generating meaningful insights through real-time monitoring and predictive analytics.
3.11 Conclusions
This chapter has provided a comprehensive overview of the methodology employed to design, construct, and integrate our cloud-based water quality surveillance system for the water bodies in and around Guwahati, Assam. We detailed the transition from the initial concept to the 3D-printed PLA boat equipped with a suite of water quality sensors (TDS, conductivity, pH, temperature, turbidity), a NEO 6M GPS module for spatial data, and a Micro SD card reader for local data redundancy. The central role of the ESP32 in data acquisition, processing, and wireless transmission to the Firebase cloud database was explained, along with the setup of the Google Cloud VM (managed with Coolify) for hosting the real-time dashboard and training the machine learning models. The development and preliminary testing of the three machine learning models – LSTM for time series forecasting and corrosion risk assessment, and Random Forest for water quality grade assessment – were also discussed. The justification for the selection of each hardware and software component, driven by the project's objectives of continuous, real-time, and predictive analysis, was provided. Our preliminary results indicate the successful integration of the core system components, including reliable sensor data acquisition, robust wireless communication, local data logging capabilities, and the initial functionality of the real-time dashboard. The initial training of the machine learning models shows promising trends in learning from the collected data. The successful integration of the motor and control system allows for dynamic data collection across different locations within water bodies. This robust methodological foundation sets the stage for the subsequent chapters, where we will present a detailed analysis of the collected data, the performance evaluation of the machine learning models, the insights gained from spatial data, and the overall effectiveness of our cloud-based water quality surveillance system in providing actionable intelligence for the water bodies in our region.
